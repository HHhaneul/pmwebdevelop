객체 
1. 객체 리터럴
- 객체는 이름과 값을 한쌍을 묶은 데이터를 여러개 모은 것
- 객체는 데이터 여러개를 하나로 모은 복합 데이터로 연관배열 또는 사전(Diction) 이라고 부릅니다.
  
2. 객체 리터럴로 객체 생성하기
	{
		속성 : 값,
		속성 : 값, 
		....
	}
	
	값 : 원시타입(숫자, 문자, null, undefined, ..., true, false), 객체 
	
	참고)
		자바스크립트는 원시타입을 제외하면 모든것이 객체!
		
		속성 - 프로퍼티(property)
		
	객체의 속성에 접근 하는 법
	
	마침표 연산자(.)
		- 변수명.속성명;
		- 변수로 속성명을 대체 X
		- 숫자도 사용 불가 
		
	대괄호 연산자([...])
		- 변수명['속성명']
		- 변수로 속성명을 대체 
		- 숫자도 속성명으로 사용 가능 
		
	속성값 변경 : 이미 있는 속성에 값을 대입하면 변경 
	
	
3. 프로퍼티 추가와 삭제
	추가 
		- 객체에 없는 속성명에 대입하시면 추가 
	
	삭제 
		delete 변수명.속성명;
	
	
4. in 연산자로 프로퍼티가 있는지 확인하기 
	- 객체에 특정 속성이 포함되어 있는지 체크하는 연산자 
	"속성명" in 객체의 변수명 / true / false 
	
	-> for (.... in ) 구문에서 많이 사용 된다.
	
		for (var key in person) {
			console.log(key, person[key]);
		}
	
5. 메서드
	- 객체안에  값으로써  함수 객체가 오면, 메서드 
	
6. 객체는 참조 타입
	- 객체에 대입되어 있는 변수 : 참조변수 
	- 주소 값을 가지고 객체를 참조한다.
	
함수
- 일련의 처리를 하나로 모아 언제든 호출할 수 있도록 만들어 놓은것

1. 함수 선언문으로 함수 정의하기
function 함수명(매개변수, ... ) {
	// 실행 코드 
	
	return 반환값; // return이 없으면 - undefined 값이 반환 
}


2. 함수 호출
	함수명(....);
	
3. 함수의 실행흐름
4. 함수 선언문의 끌어올림
5. 값으로서의 함수
6. 참조에 의한 호출과 값에 의한 호출


참고)
	함수 객체  - 1급 객체
	
변수의 유효범위
1. 전역 유효 범위와 지역 유효범위
2. 변수의 충돌
3. 함수 안에서 변수 선언과 변수 끌어올림
4. 함수 안에서 변수 선언 생략 
5. 블록 유효 범위 : let과 const
6. 함수 리터럴로 함수 정의하기
7. 객체의 메서드
8. 매개변수로 함수 
9. 즉시 실행 함수
10. 가변길이 인수 목록(Arguments 객체)
11. 생성자



내장 객체
1. 내장 생성자
2. 내장 객체