입출력(I/O)
java.io
1. 입출력이란?
	Input - 입력 / Output - 출력
	키보드, 파일 ... / 화면 (터미널, 웹화면).
	
2. 스트림(stream)
- 데이터를 운반하는데 사용되는 연결통로

- 입력 스트림: 입력 받는 통로
	- 바이트 단위 입력 스트림
	(InputStream)

	- 문자 단위 입력 스트림
	(Reader)

- 출력 스트림: 출력 하는 통로
	- 바이트 단위 출력 스트림
	(OutputStream)

	- 문자 단위 출력 스트림
	(Writer)


바이트기반 스트림
1. InputStream: 추상 클래스
	- int read()
		-> 파일 데이터를 다 읽으면 -1 반환
		-> 1바이트씩 한칸씩 이동하면서 읽기 -> 효율성이 떨어진다 (준비에 소요되는 비용이 읽기 비용보다 더 크다.)
		-> 효율성을 증대 시키려면 버퍼를 고려

		unsigned byte (1) - 양의 정수 (0~255)
		- -1은 표현X

		byte범위 숫자(0~255) + -1 > short, int, long
		- int available(): 남아있는 바이트 수 반환, 0 -> 다 읽음
		- int read(byte[] b): b - 버퍼 메모리 공간
				- 버퍼에 읽어온 데이터 기록
				- 반환값: 읽어온 바이트 수

		- close(): 자원 해제 / AutoCloseable 인터페이스 구현 클래스이면 try ~ with resources 구문을 사용해서 자동 해제

	기반스트림
	  - 직접 데이터 소스에 접근하는 스트림
	    예) 파일 
	  
	  FileInputStream: 파일 기반스트림 ☆★가장 많이 사용함★☆
	  ByteArrayInputStream: 메모리 기반 스트림 // 임시로 뭔가를 담을 때 많이 사용함
	  

	보조스트림
		- 다른 스트림에 추가 기능을 더해주는 스트림
		- 생성자 매개변수 InputStream
		- FilterInputStream의 하위 클래스
		   - BufferedInputStream: 버퍼기능 제공, 기본 버퍼는 8kb
		   - DataInputStream
			- 읽어오는 자료형: 순서가 바드시 일치: 정확하게 읽을 수 있다.
			- 같은 자료형으로 주로 사용된다.
			- 파일에 끝이 도달한 경우 EOFException 발생 (End Of File ..)

		   - ObjectInputStream

		참고)
		   - Input StreamReader

		   기타
			SequenceInputStream -> 두개의 입력 스트림을 하나로 합칠 때

2. OutputStream
	void write(int byte)
	
      	기반스트림
	  - 직접 데이터에 접근하는 스트림
	  - FileOutputStream: 파일에 출력하는 스트림 / 1바이트씩 출력
	  - ByteArrayOutputStream: 메모리에 출력하는 스트림

	1바이트 (0~255, ASCII)

	'안' -> 유니코드(2): 50504


	보조스트림
	  - 기존 스트림 + 추가 기능 
	  - FilterOutStream
	     - BufferedOutputStream
		- flush(): 버퍼 비우기
		- close(): 버퍼 비우기(flush) -> close()

	     - DataOutputStream
		- 주로 같은 자료형끼리 저장

	참고)
	   - ObjectOutputStream
	   - OotputStreamWriter: 바이트 단위 출력 스트림 -> 문자 단위 출력 스트림

문자기반 스트림
1. Reader: 추상 클래스
	기반스트림
	- 데이터를 직접 접근하는 스트림

	- FileReader: 파일을 직접 접근하는 문자단위 입력 스트림
	- CharArrayReader: 메모리 기반 문자 단위 입력 스트림	
	- StringReader ..

	보조스트림
	- 기존 스트림 + 추가기능
	- BufferedReader: 기존 스트림 + 버퍼 추가 기능 (8k)

2. Writer: 추상클래스
	기반스트림
	- FileWriter: 파일을 직접 접근해서 출력하는 문자 단위 스트림
	- CharArrayWriter
	- StringWriter: 메모리 기반


	참고)
		PrintWriter
		printStream
		  - print, println, printf와 같은 메서드 추가

	보조스트림
		- BufferedWriter: 기존 스트림 + 버퍼 추가기능


GoF(Gang Of Four) 디자인패턴 // 헤드퍼스트 디자인패턴
   - 데코레이터 패턴

참고)
Scanner

표준입출력 (Standard Input/Output)
- System.in: InputStream
- System.out: PrintStream - 검정색
- System.err: PrintStream - 빨간색
	setln(InputStream In):
	setOut(PrintStream Out): 표준 출력
	setErr(PrintStream Out): 표준 에러 출력

PrintStream
	- println(...): 출력 후 줄 개행
	- print(...): 출력만, 줄개행X
	- printf(...): 형식화 기능
		%s: 문자열
		%c: char
		%d: 정수
		%f: 실수
		...

PrintWriter



2. 표준입출력의 대상변경 - setOut(), setErr(), setIn()


FIle
- 자바에서는 File클래스를 통해서 파일과 디렉토리를 다룰 수 있도록 하고 있다.


static final String separator: 디렉토리 구분 문자 - OS마다 다르게 사용되는 구분 문자를 현재 OS에 맞게 결정
			윈도우즈: D:\폴더\파일명...: 구분 문자: \
							
			리눅스: /home/team/uploads: 구분 문자: /
			맥OS: /				


static final String pathSeparator: 환경 변수 구분 문자 - OS에 맞게 알아서 결정
				윈도우즈: ' ; ' 
				리눅스/맥OS: ' : '



.. : 상위 디렉토리

직렬화(Serialization)
- 직렬화란 객체를 데이터 스트림으로 만드는 것을 뜻한다.
	- 인스턴스 변수 -> 직렬화
	- 메서드, 상수, 정적 자원 -> 변경 X

- 객체에 저장된 데이터를 스트림에 쓰기(write)위해 연속적인(serial) 데이터로 변환하는 것을 말한다.
- 반대로 스트림으로부터 데이터를 읽어서 객체를 만드는 것을 역직렬화(deserialization)라고 한다.

1. ObjectInputStream, ObjectOutputStream
	

2. 직렬화가 가능한 클래스 만들기 - Serializable, transient
Serializable 인터페이스: 직렬화를 하겠다 표기
	- 마커 인터페이스: 정의된 메서드 X

	- 직렬화는 데이터 노출 위험성

	- transient: 직렬화 배제

3. 직렬화 가능한 클래스의 버전관리
- private static final long serialVersionUID = 버전 번호;

	- 직렬화된 데이터의 객체 버전: 버전이 달라지면 다른 객체 -> 오류
	- 지정하지 않으면 시스템 내에서 자동 생성 (소스의 변경이 발생할 때 마다 새로운 버전이 생성)

Map 객체 형태로 저장: 사용상 유리


























collect(

Collectors groupingBy


-------------------------------------------------------------------------------

바이트 기반 스트림 / 1바이트 단위
	- InputStream: 입력 스트림
	
	- OutputStream: 출력 스트림

문자 기반 스트림 / 2,3 바이트 단위
	- Reader: 입력 스트림

	- Writer: 출력 스트림

-------------------------------------------------------------------------------

class BufferedInputStream extends InputStream{
	protected InputStream in;

	public BufferedInputStream(InputStream in){
		this.in = in;
	}

	...

	public int read() {
		//추가 버퍼 기능 구현
		int result = in.read();

		return result;
	}

}


계산기
	factorial

	!5 -> 5 * 4 * 3 * 2 * 1

	
		- 반복문
		- 재귀 함수

-------------------------------------------------------------------------------

기존 스트림 - 핵심 기능

버퍼 제공 - 추가 기능

class BufferedInputStream extends InputStream {

	protected InputStream in;

	public BufferedInputStream(InputStream in){
		this.in = in;
	}

	public int read(){

	// 추가 기능 - 버퍼를 담아주는 기능
		
		int result = in read(); // 핵심기능

		return result;
	}

}

-------------------------------------------------------------------------------

InputStream
	- 바이트 단위 스트림(1바이트씩 처리)
	- 기반 스트림
	 	FileInputStream: 1바이트씩 파일에서 읽기
			int read()

		버퍼 추가 기능
		BufferedInputStream: 8kb
	
	
















OutStream
	- 바이트 단위 스트림(1바이트씩 처리)

-------------------------------------------------------------------------------

100	'A'	안녕하세요
1b	2b	10b


100	'A'	안녕하세요
4b	2b	10b



-------------------------------------------------------------------------------


java.io


바이트 기반 스트림
InputStream: 입력 스트림
	기반 스트림
		FileInputStream
		ByteArrayInputStream...

	보조 스트림
		FilterInputStream
			BufferedInputStream
			DataInputStream

		ObjectInputStream

기타
	SequenceInputStream

OutputStream: 출력 스트림
	기반 스트림
		FileOutputStream
		ByteArrayOutputStream

	보조 스트림
		FileOutputStream
			BufferedOutputStream
			DataOutputStream

		ObjectOutputStream

문자 기반 스트림
Reader: 문자기반 읽기 스트림
	기반 스트림
		FileReader

	보조 스트림
		BufferedReader
			- String readLine() ...

Writer: 문자기반 쓰기 스트림
	기반 스트림
		FileWriter

	보조 스트림
		BufferedWriter


기타
	PrintStream
	PrintWriter
		- print, println, printf


System
	.in: InputStream
	.out: PrintStream
	.err: PrintStream















































package exam01;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.List;
import java.util.Map;

public class Ex04 {
    public static void main (String[] args){
        try(FileInputStream fis = new FileInputStream("data.obj");
        ObjectInputStream ois = new ObjectInputStream(fis)){

            Map<String, Object> data = (Map<String, Object>ois.readObject();
            List<Book> books = (List<Book>data.get("books");
            Book book = (Book)data.get("book");
            String str = (String)data.get("str");

            System.out.println("--------books---------");
            System.out.println(str);

            System.out.println("--------books---------");
            System.out.println(str);
            )

        }(IOException | ClassNotFoundException e){
            e.printStackTrace();
        }
    }
}




package exam01;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EX03 {
    public static void main(String[] args){
        Map<String, Object> data = new HashMap();
        List<Book> books = new ArrayList<>();

        book.add(new Book("책1", "저자1", "출판사1", 1000));

        book.add(new Book("책2", "저자2", "출판사2", 2000));

        book.add(new Book("책3", "저자3", "출판사3", 3000));

        data.put("books", books);
        data.put("book", new Book("책4", "저자4", "출판사4", 4000));
        data.put ("str", "ABC");

        try(FileOutputStream fos = new FileOutputStream("data.obj");
            ObjectOutputStream oos = new ObjectOutputStream(fos){

                oos.writeObject(data);
            }catch(IOException e){
            e.printStackTrace();
        }

    }
}




















