추상클래스
추상적 클래수 - 메서드의 구현체가 없는 형태의 클래스


구체적 클래스 - 메서드의 구현체가 완전한 클래스


추상적?
- 정해지지 않은 -> 메서드
- 공통적인

1. 추상클래스란?
2. 추상클래스 문법
abstract 메서드
3. 추상클래스를 만드는 이유
하위클래스가 상속을 하면 객체 생성 가능

추상메서드 -> 하위클래스 따라야 할 규칙, 원칙 -> 설계 원칙

java.io.InputStream - 추상클래스
abstract int read(): 추상 메서드

AutoInputStream		FileInputStream
int read()			int read()

4. 추상클래스와 다형성
5.final 예약어

인터페이스
1. 인터페이스란?
인터페이스 - 설계
interface - 설계 목적의 용도로 한정된 클래스의 일종
- 추상메서드

interface 인터페이스명 {
	
}

2. 클래스에서 인터페이스 구현하기

인터페이스는 하위클래스가 추상메서드를 구현하지는 가장 중점 사항
-> implements(구현하다.)_

3. 인터페이스 구현과 형변환(다형성)

인터페이스의 요소 살펴보기
1. 인터페이스 상수

클래스의 멤버 변수
	- final 변수 -> 상수 -> 객체가 생성되면 접근할 수 있는 상수
	- static final 변수 -> 정적 상수 -> 객체 생성과 상관없이 접근할 수 있는 상수


2. 디폴트 메서드
- 완전히 구현된 메서드
- default
3. 정적 메서드
	static -> 인터페이스도 객체를 생성할 필요 X, 접근 가능한 메서드

4. private 메서드
- JDK 11

인터페이스 활용하기
1. 한 클래스가 여러 인터페이스를 구현하는 경우
2. 두 인터페이스의 디폴트 메서드가 중복되는 경우
3. 인터페이스 상속하기
4. 인터페이스 구현과 클래스 상속 함께 쓰기








추상클래스
	- 추상 메서드
	- 하위클래스가 따라야 할 설계 원칙
	abstract class 클래스명{
		public abstract int add(,,,,);
	}

	- 하위클래스가 공유하게 될 공통 기능
	- 하위클래스가 상속을 통해서 객체 생성
		extends		
		- 클래스를 하나만 상속 받게 되어 있고

인터페이스
- 설계가 목적으로 정해진 클래스 일종

	interface 인터페이스명{
	
	}
	- 추상 메서드만 정의 하도록 설계가 되어있다.
	- 변수 정의 -> 변수 X -> 정적 상수 (public static final...)
	- 정적 메서드
 	- 완전히 구현된 인스턴스 메서드 정의 가능(defalt)
	- private 메서드
	- 하위클래스가 구현을 통해서 객체 생성
		-> implements
		-> 여러개의 인터페이스를 하나의 클래스에서 구현가능

Buy, Sell 인터페이스
Order 클래스
	








