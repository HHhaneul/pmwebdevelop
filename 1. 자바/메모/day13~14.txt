상속
내부 클래스
1. 지역 내부 클래스
지역 - 함수 내부

인터페이스, 추상클래스 -> 직접 객체 지역 내부에 생성



인터페이스, 추상클래스가 객체가 되는 조건?
1) 환경 - 지역 내부, 멤버 변수
2) 객체가 될 수 없는 조건(추상 메서드)을 해소
	- 추상 메서드의 구현체를 정의

2. 익명 내부 클래스


예외처리

1. 오류와 예외
오류(Error): 시스템적인 오류(인프라...)
	- 개발자가 통제X

예외(Exception): 프로그램 소스상의 오류
	- 개발자가 통제O

10 / 0 -> ArtithmethicException 발생

2. 예외 클래스의 종류

Throwable
  Exception을 바로 상속 받는 예외
       	예) - IOException - FileNotFoundException
	- 예외의 확인이 컴파일 시점에 이루어진다.
	- 예외 발생 시 컴파일 X (class 파일이 생성 X)
	- 엄격한 예외, 형식을 매우 중시
	- 예외가 발생하든 안하든 무조건 예외 처리

  Exception
	- RuntimeException 상속받은 예외
           	    예) ArithmethicException	
		NullPointerException
		-> 참조 변수에 값이 null 인 경우 메서드 호출 시 발생

	- 예외가 발생 할 수 있더라도 컴파일 O -> class 파일이 생성
	- 예외 확인이 실행중(Runtime)에 이뤄진다.
	- 비교적 유연한 예외


java.exe -> 자바 class를 실행
javac.exe -> java 파일 -> class 파일로 컴파일	

Throwable: 던질 수 있는 클래스
	- Error

	- Exception

예외를 발생 시키는 방법 -> 예외 던지기 (Throwable를 상속 받은 클래스만)

throw 예외 객체 -> 예외 발생
- 예외는 던질 수 있는 클래스 (Throwable 하위 클래스만 가능), 던지기(throw)를 해야 발생

3. 예외 처리하기
try {
	// 예외가 발생할 가능성이 있는코드
} catch (예외 객체){
	//예외에 대한 적절한 처리
}

예외 발생 시 문제 해결을 위한 가장 중요한 내용 - 오류 발생의 원인, 정보
Throwable: 예외의 정보를 확인하는 다양한 메서드가 정의
Throwable
	- String getMessage()
	- void printStackTrace()


4. try-catch-finally문

FileInputStream
	- FileNotFoundException(Exception 형태의 엄격한 예외)
	- 적절한 처리를 반드시 해야 되는 예외가 정의



try{
	// 예외가 발생할 가능성 있는 코드
	// 예외가 없으면 실행

} catch(예외 객체){
	// 예외가 발생 시 예외처리
} finally{
	// 예외가 발생하든 안하는 항상 유입되는 구간
	// 함수 안에서 return 한 이후라도 항상 수행됩니다.

	// 주로 하는 작업
		1) 자원 해제
		2) 로그 기록
}

5. try-with-resources문
    - 자원해제를 자동으로 호출 - JDK 7

    try(자원 해제가 필요한 객체;
	자원 해제가 필요한 객체 ...){

} catch(예외 객체 ....){ // 생략 가능

}

... finally{ //생략 가능

} 



	AutoCloseable 인터페이스 구현 객체만 자원 해제 해준다!
	


6. 예외 처리 미루기
    - 예외 처리를 메서드를 호출하는 쪽에서 처리하도록 전가
    메서드 정의 부분 throw 처리를 전가시키는 예외 클래스 명시
    - 메서드를 사용하는 쪽에서 통제 가능하게 하기 위해서
    - 메서드에서 발생하는 예외를 처리하는 상황이 다양할 때

7. 다중 예외 처리
모든 예외 클래스
    - Exception
    - RuntimeException

8. 사용자 정의 예외
    로그인
	- 아이디 일치하지 않을 때 예외 발생
	- 비밀번호가 일치하지 않을 때 예외 발생








------------------------------------------------------------------------------------------------

예외
Exception을 상속 받은 예외 클래스
	- 예외가 체크되는 시점 컴파일 시 -> 예외가 있으면 컴파일 X
	- class 파일이 생성 X

Exception - RuntimeException 상속 받은 예외 클래스
	- 예외가 체크되는 시점 -> 실행 시에 체크된다.
	- 실행을 하려면? 컴파일이 먼저 이뤄져야 가능 (class 파일이 생성)

---------------------------------------------------------------------------------------------------

Throwable: 던질 수 있는
    Error - 오류

    Exception - 오류: 프로그램 소스상의 문제 - 버그

	Exception 상속 받은 예외 클래스(RuntimeException X)
	- 예외 확인 시점: 컴파일 시에 확인, 예외 발생 -> 컴파일 중단
	- 예외 시 class 파일 생성 X
	- 예) FileNotFoundException

	Exception - RuntimeException을 상속 받은 예외 클래스
	(Runtime - 실행)
	- 예외 확인 시점: 실행 시에 확인, 실행 시 발생 -> 프로그램 중단
	- 실행을 하려면? class 파일 필요, 컴파일이 진행 되어야 가능

	- ArithmethicException, NullPointerException


    예외 발생 -> 던질 수 있는 클래스를 던져서 발생
		(상위 클래스가 Throwable)

    throw 예외 객체;

    throw new RuntimeException(....);



------------------------------------------------------------------------
오류(Error): 시스템 오류, 개발자가 통제 X

예외(Exception): 프로그래밍에 오류, 개발자 통제 O

Throwable
    Error

    Exception
       - RuntimeException 없는 예외
	- 예외를 체크하는 시점: 컴파일 시점
	- 예외가 발생하면 컴파일 X -> 클래스 파일 생성 X
	- 엄격한 예외, 형식 O
	- 예외가 발생하든 하지 않든 무조건 예외처리 해야한다.

       - RuntimeException 있는 예외
	- 예외를 체크하는 시점: 실행 중
	- 실행은 해야 된다..
	- 실행을 하려면 클래스파일 <-- 컴파일은 된다...
	- 클래스 파일도 생성 O
	- 예외가 발생 프로그램이 중단
	- 유연한 예외, 형식이 덜 중요
	- 예외처리를 하지 않아도 된다.



예외 발생 - 예외를 던질 수 있는 객체(Throwable을 상속받은 하위 클래스만) 던짐(throw)으로써 발생

throw 예외 객체; -> 예외 발생

예) throw new RuntimeException(....);

try{

	//예외가 발생할 수 있는 가능성이 있는 코드
}catch(예외 객체){
	// 발생한 예외에 대한 처리

}

오류가 발생하면 가장 중요한 부분?
- 오류의 원인과 정보를 확인 하는 것

Throwable
    String getMessage(): 오류 메시지 확인
    void printStackTrace(): 오류의 자세한 원인을 발생 위치(파일명, 라인번호) 전파된 파일까지 전체 출력


다중 예외 처리
try{

	//예외가 발생할 수 있는 가능성이 있는 코드

} catch (예외객체1|예외객체2){
	// 발생한 예외에 대한 처리

}

사용자 정의 예외
- Exception, RuntimeException, 이를 상속받은 하위 클래스 예외 상속
- 생성자를 정의 


메서드를 사용하는 쪽에서 예외 처리를 다양하게 할 때,
메서드쪽에 예외 전가 - throws

try ~ catch ~ finally

finally
    - 예외가 발생하든 안하든 항상 실행되는 코드
    - 자원해제
    - 로그기록


자원해제 -> try ~ with resources
기준 	1) AutoCloseable 인터페이스
      	2) close() 메서드를 자동 호출




Exception